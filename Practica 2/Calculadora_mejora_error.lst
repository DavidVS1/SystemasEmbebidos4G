CCS PCH C Compiler, Version 5.012, 41559               29-mar.-17 19:06

               Filename:   C:\Users\luis\Documents\4Semestre\Embebidos\SystemasEmbebidos4G\Practica 2\Calculadora_mejora_error.lst

               ROM used:   528 bytes (1%)
                           Largest free fragment is 65008
               RAM used:   8 (0%) at main() level
                           17 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
00000:  GOTO   0092
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
00004:  MOVF   0D,W
00006:  MULWF  0F
00008:  MOVFF  FF3,01
0000C:  MOVFF  FF4,00
00010:  MULWF  10
00012:  MOVF   FF3,W
00014:  ADDWF  00,F
00016:  MOVF   0E,W
00018:  MULWF  0F
0001A:  MOVF   FF3,W
0001C:  ADDWFC 00,W
0001E:  MOVWF  02
00020:  GOTO   0158 (RETURN)
*
0004E:  CLRF   01
00050:  CLRF   02
00052:  CLRF   00
00054:  CLRF   03
00056:  MOVF   10,W
00058:  BNZ   005E
0005A:  MOVF   0F,W
0005C:  BZ    008E
0005E:  MOVLW  10
00060:  MOVWF  11
00062:  BCF    FD8.0
00064:  RLCF   0D,F
00066:  RLCF   0E,F
00068:  RLCF   00,F
0006A:  RLCF   03,F
0006C:  MOVF   10,W
0006E:  SUBWF  03,W
00070:  BNZ   0076
00072:  MOVF   0F,W
00074:  SUBWF  00,W
00076:  BNC   0086
00078:  MOVF   0F,W
0007A:  SUBWF  00,F
0007C:  BTFSS  FD8.0
0007E:  DECF   03,F
00080:  MOVF   10,W
00082:  SUBWF  03,F
00084:  BSF    FD8.0
00086:  RLCF   01,F
00088:  RLCF   02,F
0008A:  DECFSZ 11,F
0008C:  BRA    0062
0008E:  GOTO   01C4 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT  
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=16000000) 
*
00024:  CLRF   FEA
00026:  MOVLW  0C
00028:  MOVWF  FE9
0002A:  MOVF   FEF,W
0002C:  BZ    004A
0002E:  MOVLW  05
00030:  MOVWF  01
00032:  CLRF   00
00034:  DECFSZ 00,F
00036:  BRA    0034
00038:  DECFSZ 01,F
0003A:  BRA    0032
0003C:  MOVLW  2E
0003E:  MOVWF  00
00040:  DECFSZ 00,F
00042:  BRA    0040
00044:  BRA    0046
00046:  DECFSZ FEF,F
00048:  BRA    002E
0004A:  GOTO   0192 (RETURN)
.................... #define retardo 50 
.................... #define contadorN 10 
.................... #use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
....................  
....................  int16 error(int &contador); 
....................   
....................  void main (void){ 
*
00092:  CLRF   FF8
00094:  BCF    FD0.7
00096:  MOVLW  60
00098:  MOVWF  FD3
0009A:  MOVLW  40
0009C:  MOVWF  F9B
0009E:  MOVF   FD3,W
000A0:  MOVF   FC1,W
000A2:  ANDLW  C0
000A4:  IORLW  0F
000A6:  MOVWF  FC1
000A8:  MOVLW  07
000AA:  MOVWF  FB4
....................     setup_oscillator(OSC_16MHZ);//Generalmente este va primero 
000AC:  MOVLW  60
000AE:  MOVWF  FD3
000B0:  MOVLW  40
000B2:  MOVWF  F9B
000B4:  MOVF   FD3,W
....................     set_tris_a(0b00000000); // output A0 A1 A2 A3 A4 A5 A6 A7 
000B6:  MOVLW  00
000B8:  MOVWF  F92
....................     set_tris_b(0b11110000); // output B0 B1 B2 B3 input B4 B5 B6 B7 
000BA:  MOVLW  F0
000BC:  MOVWF  F93
....................     set_tris_c(0b11111111); 
000BE:  MOVLW  FF
000C0:  MOVWF  F94
....................     set_tris_d(0b11111111); 
000C2:  MOVWF  F95
....................   //Los tris de C y D? 
....................     SETUP_ADC_PORTS(NO_ANALOGS);// para conversion a todos los puertos analogos a digitales 
000C4:  MOVF   FC1,W
000C6:  ANDLW  C0
000C8:  IORLW  0F
000CA:  MOVWF  FC1
....................     int8 contador=1; 
....................     int16 resultado=0; 
....................     int8 operacion=0; //Variables operandos oper 
000CC:  MOVLW  01
000CE:  MOVWF  05
000D0:  CLRF   07
000D2:  CLRF   06
000D4:  CLRF   08
....................     while(True){ 
....................     if(input(PIN_B4)) operacion=1; //suma 
000D6:  BTFSS  F81.4
000D8:  BRA    00E0
000DA:  MOVLW  01
000DC:  MOVWF  08
000DE:  BRA    00FC
....................     else if(input(PIN_B5)) operacion=2;//resta 
000E0:  BTFSS  F81.5
000E2:  BRA    00EA
000E4:  MOVLW  02
000E6:  MOVWF  08
000E8:  BRA    00FC
....................     else if(input(PIN_B6)) operacion=3;//multiplicacion 
000EA:  BTFSS  F81.6
000EC:  BRA    00F4
000EE:  MOVLW  03
000F0:  MOVWF  08
000F2:  BRA    00FC
....................     else if(input(PIN_B7)) operacion=4;//divicion 
000F4:  BTFSS  F81.7
000F6:  BRA    00FC
000F8:  MOVLW  04
000FA:  MOVWF  08
....................     if(operacion==1) resultado = (long)input_c() + (long)input_d(); 
000FC:  DECFSZ 08,W
000FE:  BRA    0116
00100:  MOVF   F82,W
00102:  CLRF   0A
00104:  MOVWF  09
00106:  MOVF   F83,W
00108:  CLRF   03
0010A:  ADDWF  09,W
0010C:  MOVWF  06
0010E:  MOVF   03,W
00110:  ADDWFC 0A,W
00112:  MOVWF  07
00114:  BRA    01CC
....................     else if(operacion == 2) resultado = (long)input_c() - (long)input_d(); 
00116:  MOVF   08,W
00118:  SUBLW  02
0011A:  BNZ   0132
0011C:  MOVF   F82,W
0011E:  CLRF   0A
00120:  MOVWF  09
00122:  MOVF   F83,W
00124:  CLRF   03
00126:  SUBWF  09,W
00128:  MOVWF  06
0012A:  MOVF   03,W
0012C:  SUBWFB 0A,W
0012E:  MOVWF  07
00130:  BRA    01CC
....................     else if(operacion == 3) resultado = (long)input_c() * (long)input_d(); 
00132:  MOVF   08,W
00134:  SUBLW  03
00136:  BNZ   0162
00138:  MOVF   F82,W
0013A:  CLRF   0A
0013C:  MOVWF  09
0013E:  MOVF   F83,W
00140:  CLRF   03
00142:  MOVWF  0B
00144:  MOVFF  03,0C
00148:  MOVFF  0A,0E
0014C:  MOVFF  09,0D
00150:  MOVFF  03,10
00154:  MOVWF  0F
00156:  BRA    0004
00158:  MOVFF  02,07
0015C:  MOVFF  01,06
00160:  BRA    01CC
....................     else if(operacion == 4) 
00162:  MOVF   08,W
00164:  SUBLW  04
00166:  BNZ   01CC
....................     { 
....................     if(input_d()==0)  
00168:  MOVF   F83,F
0016A:  BNZ   01A4
....................     { 
....................        resultado=error(contador);  //funcion de error 
*
0019A:  MOVFF  02,07
0019E:  MOVFF  01,06
....................     } 
001A2:  BRA    01CC
....................     else resultado = (long)input_c() / (long)input_d(); 
001A4:  MOVF   F82,W
001A6:  CLRF   0A
001A8:  MOVWF  09
001AA:  MOVF   F83,W
001AC:  CLRF   03
001AE:  MOVWF  0B
001B0:  MOVFF  03,0C
001B4:  MOVFF  0A,0E
001B8:  MOVFF  09,0D
001BC:  MOVFF  03,10
001C0:  MOVWF  0F
001C2:  BRA    004E
001C4:  MOVFF  02,07
001C8:  MOVFF  01,06
....................     } 
....................     output_a(resultado); 
001CC:  MOVFF  06,F89
....................     output_b(resultado>>6); 
001D0:  RRCF   07,W
001D2:  MOVWF  0A
001D4:  RRCF   06,W
001D6:  MOVWF  09
001D8:  RRCF   0A,F
001DA:  RRCF   09,F
001DC:  RRCF   0A,F
001DE:  RRCF   09,F
001E0:  RRCF   0A,F
001E2:  RRCF   09,F
001E4:  RRCF   0A,F
001E6:  RRCF   09,F
001E8:  RRCF   0A,F
001EA:  RRCF   09,F
001EC:  MOVLW  03
001EE:  ANDWF  0A,F
001F0:  MOVFF  09,F8A
....................     output_e(resultado>>10); 
001F4:  CLRF   0A
001F6:  RRCF   07,W
001F8:  MOVWF  09
001FA:  RRCF   09,F
001FC:  MOVLW  3F
001FE:  ANDWF  09,F
00200:  BCF    F96.0
00202:  BCF    F96.1
00204:  BCF    F96.2
00206:  BCF    F96.3
00208:  MOVFF  09,F8D
0020C:  BRA    00D6
....................     }  
....................  }    
....................  int16 error(int &contador) 
*
0016C:  CLRF   0A
0016E:  CLRF   09
*
0020E:  SLEEP 
....................  { 
....................    int16 leds=0; 
....................    if(contador<contadorN) 
*
00170:  MOVF   05,W
00172:  SUBLW  09
00174:  BNC   017E
....................    { 
....................       leds=8191; 
00176:  MOVLW  1F
00178:  MOVWF  0A
0017A:  SETF   09
....................    } 
0017C:  BRA    0182
....................    else 
....................    { 
....................       leds=0; 
0017E:  CLRF   0A
00180:  CLRF   09
....................    } 
....................    if(contador==20) 
00182:  MOVF   05,W
00184:  SUBLW  14
00186:  BNZ   018A
....................    { 
....................       contador=0; 
00188:  CLRF   05
....................    } 
....................    contador++; 
0018A:  INCF   05,F
....................    delay_ms(retardo); 
0018C:  MOVLW  32
0018E:  MOVWF  0C
00190:  BRA    0024
....................    return leds; 
00192:  MOVFF  09,01
00196:  MOVFF  0A,02
.................... } 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
