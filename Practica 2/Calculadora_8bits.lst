CCS PCH C Compiler, Version 5.012, 41559               27-mar-17 20:32

               Filename:   D:\SystemasEmbebidos4G\Practica 2\Calculadora_8bits.lst

               ROM used:   572 bytes (1%)
                           Largest free fragment is 64964
               RAM used:   8 (0%) at main() level
                           16 (0%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   00D8
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
00004:  MOVF   0C,W
00006:  MULWF  0E
00008:  MOVFF  FF3,01
0000C:  MOVFF  FF4,00
00010:  MULWF  0F
00012:  MOVF   FF3,W
00014:  ADDWF  00,F
00016:  MOVF   0D,W
00018:  MULWF  0E
0001A:  MOVF   FF3,W
0001C:  ADDWFC 00,W
0001E:  MOVWF  02
00020:  GOTO   01A8 (RETURN)
*
00094:  CLRF   01
00096:  CLRF   02
00098:  CLRF   00
0009A:  CLRF   03
0009C:  MOVF   0F,W
0009E:  BNZ   00A4
000A0:  MOVF   0E,W
000A2:  BZ    00D4
000A4:  MOVLW  10
000A6:  MOVWF  10
000A8:  BCF    FD8.0
000AA:  RLCF   0C,F
000AC:  RLCF   0D,F
000AE:  RLCF   00,F
000B0:  RLCF   03,F
000B2:  MOVF   0F,W
000B4:  SUBWF  03,W
000B6:  BNZ   00BC
000B8:  MOVF   0E,W
000BA:  SUBWF  00,W
000BC:  BNC   00CC
000BE:  MOVF   0E,W
000C0:  SUBWF  00,F
000C2:  BTFSS  FD8.0
000C4:  DECF   03,F
000C6:  MOVF   0F,W
000C8:  SUBWF  03,F
000CA:  BSF    FD8.0
000CC:  RLCF   01,F
000CE:  RLCF   02,F
000D0:  DECFSZ 10,F
000D2:  BRA    00A8
000D4:  GOTO   01EC (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=32000000) 
*
00024:  CLRF   FEA
00026:  MOVLW  09
00028:  MOVWF  FE9
0002A:  MOVF   FEF,W
0002C:  BZ    0048
0002E:  MOVLW  0A
00030:  MOVWF  01
00032:  CLRF   00
00034:  DECFSZ 00,F
00036:  BRA    0034
00038:  DECFSZ 01,F
0003A:  BRA    0032
0003C:  MOVLW  5F
0003E:  MOVWF  00
00040:  DECFSZ 00,F
00042:  BRA    0040
00044:  DECFSZ FEF,F
00046:  BRA    002E
00048:  RETURN 0
.................... #define retardo 500 
....................  
.................... void error(); 
....................  
.................... void main (void){ 
*
000D8:  CLRF   FF8
000DA:  BCF    FD0.7
000DC:  MOVLW  70
000DE:  MOVWF  FD3
000E0:  MOVLW  40
000E2:  MOVWF  F9B
000E4:  MOVF   FD3,W
000E6:  MOVF   FC1,W
000E8:  ANDLW  C0
000EA:  IORLW  0F
000EC:  MOVWF  FC1
000EE:  MOVLW  07
000F0:  MOVWF  FB4
....................    set_tris_a(0b00000000); // output A0 A1 A2 A3 A4 A5 A6 A7 
000F2:  MOVLW  00
000F4:  MOVWF  F92
....................    set_tris_b(0b11110000); // output B0 B1 B2 B3 input B4 B5 B6 B7 
000F6:  MOVLW  F0
000F8:  MOVWF  F93
....................    SETUP_ADC_PORTS(NO_ANALOGS);// para conversion a todos los puertos analogos a digitales 
000FA:  MOVF   FC1,W
000FC:  ANDLW  C0
000FE:  IORLW  0F
00100:  MOVWF  FC1
....................    setup_oscillator(OSC_32MHZ); 
00102:  MOVLW  70
00104:  MOVWF  FD3
00106:  MOVLW  40
00108:  MOVWF  F9B
0010A:  MOVF   FD3,W
....................    int16 resultado=0; 
....................    int8 operacion=0; //Variables operandos oper 
0010C:  CLRF   06
0010E:  CLRF   05
00110:  CLRF   07
....................    while(True){ 
....................    if(input(PIN_B4)) operacion=1; //suma 
00112:  BSF    F93.4
00114:  BTFSS  F81.4
00116:  BRA    011E
00118:  MOVLW  01
0011A:  MOVWF  07
0011C:  BRA    0140
....................    else if(input(PIN_B5)) operacion=2;//resta 
0011E:  BSF    F93.5
00120:  BTFSS  F81.5
00122:  BRA    012A
00124:  MOVLW  02
00126:  MOVWF  07
00128:  BRA    0140
....................    else if(input(PIN_B6)) operacion=3;//multiplicacion 
0012A:  BSF    F93.6
0012C:  BTFSS  F81.6
0012E:  BRA    0136
00130:  MOVLW  03
00132:  MOVWF  07
00134:  BRA    0140
....................    else if(input(PIN_B7)) operacion=4;//divicion 
00136:  BSF    F93.7
00138:  BTFSS  F81.7
0013A:  BRA    0140
0013C:  MOVLW  04
0013E:  MOVWF  07
....................    if(operacion==1) resultado = (long)input_c() + (long)input_d(); 
00140:  DECFSZ 07,W
00142:  BRA    015E
00144:  SETF   F94
00146:  MOVF   F82,W
00148:  CLRF   09
0014A:  MOVWF  08
0014C:  SETF   F95
0014E:  MOVF   F83,W
00150:  CLRF   03
00152:  ADDWF  08,W
00154:  MOVWF  05
00156:  MOVF   03,W
00158:  ADDWFC 09,W
0015A:  MOVWF  06
0015C:  BRA    01F4
....................    else if(operacion == 2) resultado = (long)input_c() - (long)input_d(); 
0015E:  MOVF   07,W
00160:  SUBLW  02
00162:  BNZ   017E
00164:  SETF   F94
00166:  MOVF   F82,W
00168:  CLRF   09
0016A:  MOVWF  08
0016C:  SETF   F95
0016E:  MOVF   F83,W
00170:  CLRF   03
00172:  SUBWF  08,W
00174:  MOVWF  05
00176:  MOVF   03,W
00178:  SUBWFB 09,W
0017A:  MOVWF  06
0017C:  BRA    01F4
....................    else if(operacion == 3) resultado = (long)input_c() * (long)input_d(); 
0017E:  MOVF   07,W
00180:  SUBLW  03
00182:  BNZ   01B2
00184:  SETF   F94
00186:  MOVF   F82,W
00188:  CLRF   09
0018A:  MOVWF  08
0018C:  SETF   F95
0018E:  MOVF   F83,W
00190:  CLRF   03
00192:  MOVWF  0A
00194:  MOVFF  03,0B
00198:  MOVFF  09,0D
0019C:  MOVFF  08,0C
001A0:  MOVFF  03,0F
001A4:  MOVWF  0E
001A6:  BRA    0004
001A8:  MOVFF  02,06
001AC:  MOVFF  01,05
001B0:  BRA    01F4
....................    else if(operacion == 4) 
001B2:  MOVF   07,W
001B4:  SUBLW  04
001B6:  BNZ   01F4
....................    { 
....................    if(input_d()==0) error() , delay_ms(2); //funcion de error  
001B8:  SETF   F95
001BA:  MOVF   F83,F
001BC:  BNZ   01C8
001BE:  BRA    004A
001C0:  MOVLW  02
001C2:  MOVWF  09
001C4:  RCALL  0024
001C6:  BRA    01F4
....................    else resultado = (long)input_c() / (long)input_d(); 
001C8:  SETF   F94
001CA:  MOVF   F82,W
001CC:  CLRF   09
001CE:  MOVWF  08
001D0:  SETF   F95
001D2:  MOVF   F83,W
001D4:  CLRF   03
001D6:  MOVWF  0A
001D8:  MOVFF  03,0B
001DC:  MOVFF  09,0D
001E0:  MOVFF  08,0C
001E4:  MOVFF  03,0F
001E8:  MOVWF  0E
001EA:  BRA    0094
001EC:  MOVFF  02,06
001F0:  MOVFF  01,05
....................    } 
....................    output_a(resultado); 
001F4:  CLRF   F92
001F6:  MOVFF  05,F89
....................    output_b(resultado>>6); 
001FA:  RRCF   06,W
001FC:  MOVWF  09
001FE:  RRCF   05,W
00200:  MOVWF  08
00202:  RRCF   09,F
00204:  RRCF   08,F
00206:  RRCF   09,F
00208:  RRCF   08,F
0020A:  RRCF   09,F
0020C:  RRCF   08,F
0020E:  RRCF   09,F
00210:  RRCF   08,F
00212:  RRCF   09,F
00214:  RRCF   08,F
00216:  MOVLW  03
00218:  ANDWF  09,F
0021A:  CLRF   F93
0021C:  MOVFF  08,F8A
....................    output_e(resultado>>10); 
00220:  CLRF   09
00222:  RRCF   06,W
00224:  MOVWF  08
00226:  RRCF   08,F
00228:  MOVLW  3F
0022A:  ANDWF  08,F
0022C:  BCF    F96.0
0022E:  BCF    F96.1
00230:  BCF    F96.2
00232:  BCF    F96.3
00234:  MOVFF  08,F8D
00238:  BRA    0112
....................    }  
.................... }    
.................... void error() 
0023A:  SLEEP 
.................... { 
....................    output_a(0b00111111); 
*
0004A:  CLRF   F92
0004C:  MOVLW  3F
0004E:  MOVWF  F89
....................    output_b(0b00001111); 
00050:  CLRF   F93
00052:  MOVLW  0F
00054:  MOVWF  F8A
....................    output_e(0b00001111); 
00056:  BCF    F96.0
00058:  BCF    F96.1
0005A:  BCF    F96.2
0005C:  BCF    F96.3
0005E:  MOVWF  F8D
....................    delay_ms(retardo); 
00060:  MOVLW  02
00062:  MOVWF  08
00064:  MOVLW  FA
00066:  MOVWF  09
00068:  RCALL  0024
0006A:  DECFSZ 08,F
0006C:  BRA    0064
....................    output_a(0b00000000); 
0006E:  CLRF   F92
00070:  CLRF   F89
....................    output_b(0b00000000); 
00072:  CLRF   F93
00074:  CLRF   F8A
....................    output_e(0b00001000); 
00076:  BCF    F96.0
00078:  BCF    F96.1
0007A:  BCF    F96.2
0007C:  BCF    F96.3
0007E:  MOVLW  08
00080:  MOVWF  F8D
....................    delay_ms(retardo); 
00082:  MOVLW  02
00084:  MOVWF  08
00086:  MOVLW  FA
00088:  MOVWF  09
0008A:  RCALL  0024
0008C:  DECFSZ 08,F
0008E:  BRA    0086
00090:  GOTO   01C0 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
