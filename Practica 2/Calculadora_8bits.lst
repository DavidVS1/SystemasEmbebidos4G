CCS PCH C Compiler, Version 5.012, 41559               27-mar-17 23:06

               Filename:   D:\SystemasEmbebidos4G\Practica 2\Calculadora_8bits.lst

               ROM used:   574 bytes (1%)
                           Largest free fragment is 64962
               RAM used:   8 (0%) at main() level
                           16 (0%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   00DA
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
00004:  MOVF   0C,W
00006:  MULWF  0E
00008:  MOVFF  FF3,01
0000C:  MOVFF  FF4,00
00010:  MULWF  0F
00012:  MOVF   FF3,W
00014:  ADDWF  00,F
00016:  MOVF   0D,W
00018:  MULWF  0E
0001A:  MOVF   FF3,W
0001C:  ADDWFC 00,W
0001E:  MOVWF  02
00020:  GOTO   01AA (RETURN)
*
00096:  CLRF   01
00098:  CLRF   02
0009A:  CLRF   00
0009C:  CLRF   03
0009E:  MOVF   0F,W
000A0:  BNZ   00A6
000A2:  MOVF   0E,W
000A4:  BZ    00D6
000A6:  MOVLW  10
000A8:  MOVWF  10
000AA:  BCF    FD8.0
000AC:  RLCF   0C,F
000AE:  RLCF   0D,F
000B0:  RLCF   00,F
000B2:  RLCF   03,F
000B4:  MOVF   0F,W
000B6:  SUBWF  03,W
000B8:  BNZ   00BE
000BA:  MOVF   0E,W
000BC:  SUBWF  00,W
000BE:  BNC   00CE
000C0:  MOVF   0E,W
000C2:  SUBWF  00,F
000C4:  BTFSS  FD8.0
000C6:  DECF   03,F
000C8:  MOVF   0F,W
000CA:  SUBWF  03,F
000CC:  BSF    FD8.0
000CE:  RLCF   01,F
000D0:  RLCF   02,F
000D2:  DECFSZ 10,F
000D4:  BRA    00AA
000D6:  GOTO   01EE (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=16000000) 
*
00024:  CLRF   FEA
00026:  MOVLW  09
00028:  MOVWF  FE9
0002A:  MOVF   FEF,W
0002C:  BZ    004A
0002E:  MOVLW  05
00030:  MOVWF  01
00032:  CLRF   00
00034:  DECFSZ 00,F
00036:  BRA    0034
00038:  DECFSZ 01,F
0003A:  BRA    0032
0003C:  MOVLW  2E
0003E:  MOVWF  00
00040:  DECFSZ 00,F
00042:  BRA    0040
00044:  BRA    0046
00046:  DECFSZ FEF,F
00048:  BRA    002E
0004A:  RETURN 0
.................... #define retardo 500 
....................  
.................... void error(); 
....................  
.................... void main (void){ 
*
000DA:  CLRF   FF8
000DC:  BCF    FD0.7
000DE:  MOVLW  60
000E0:  MOVWF  FD3
000E2:  MOVLW  40
000E4:  MOVWF  F9B
000E6:  MOVF   FD3,W
000E8:  MOVF   FC1,W
000EA:  ANDLW  C0
000EC:  IORLW  0F
000EE:  MOVWF  FC1
000F0:  MOVLW  07
000F2:  MOVWF  FB4
....................    set_tris_a(0b00000000); // output A0 A1 A2 A3 A4 A5 A6 A7 
000F4:  MOVLW  00
000F6:  MOVWF  F92
....................    set_tris_b(0b11110000); // output B0 B1 B2 B3 input B4 B5 B6 B7 
000F8:  MOVLW  F0
000FA:  MOVWF  F93
....................    SETUP_ADC_PORTS(NO_ANALOGS);// para conversion a todos los puertos analogos a digitales 
000FC:  MOVF   FC1,W
000FE:  ANDLW  C0
00100:  IORLW  0F
00102:  MOVWF  FC1
....................    setup_oscillator(OSC_16MHZ); 
00104:  MOVLW  60
00106:  MOVWF  FD3
00108:  MOVLW  40
0010A:  MOVWF  F9B
0010C:  MOVF   FD3,W
....................    int16 resultado=0; 
....................    int8 operacion=0; //Variables operandos oper 
0010E:  CLRF   06
00110:  CLRF   05
00112:  CLRF   07
....................    while(True){ 
....................    if(input(PIN_B4)) operacion=1; //suma 
00114:  BSF    F93.4
00116:  BTFSS  F81.4
00118:  BRA    0120
0011A:  MOVLW  01
0011C:  MOVWF  07
0011E:  BRA    0142
....................    else if(input(PIN_B5)) operacion=2;//resta 
00120:  BSF    F93.5
00122:  BTFSS  F81.5
00124:  BRA    012C
00126:  MOVLW  02
00128:  MOVWF  07
0012A:  BRA    0142
....................    else if(input(PIN_B6)) operacion=3;//multiplicacion 
0012C:  BSF    F93.6
0012E:  BTFSS  F81.6
00130:  BRA    0138
00132:  MOVLW  03
00134:  MOVWF  07
00136:  BRA    0142
....................    else if(input(PIN_B7)) operacion=4;//divicion 
00138:  BSF    F93.7
0013A:  BTFSS  F81.7
0013C:  BRA    0142
0013E:  MOVLW  04
00140:  MOVWF  07
....................    if(operacion==1) resultado = (long)input_c() + (long)input_d(); 
00142:  DECFSZ 07,W
00144:  BRA    0160
00146:  SETF   F94
00148:  MOVF   F82,W
0014A:  CLRF   09
0014C:  MOVWF  08
0014E:  SETF   F95
00150:  MOVF   F83,W
00152:  CLRF   03
00154:  ADDWF  08,W
00156:  MOVWF  05
00158:  MOVF   03,W
0015A:  ADDWFC 09,W
0015C:  MOVWF  06
0015E:  BRA    01F6
....................    else if(operacion == 2) resultado = (long)input_c() - (long)input_d(); 
00160:  MOVF   07,W
00162:  SUBLW  02
00164:  BNZ   0180
00166:  SETF   F94
00168:  MOVF   F82,W
0016A:  CLRF   09
0016C:  MOVWF  08
0016E:  SETF   F95
00170:  MOVF   F83,W
00172:  CLRF   03
00174:  SUBWF  08,W
00176:  MOVWF  05
00178:  MOVF   03,W
0017A:  SUBWFB 09,W
0017C:  MOVWF  06
0017E:  BRA    01F6
....................    else if(operacion == 3) resultado = (long)input_c() * (long)input_d(); 
00180:  MOVF   07,W
00182:  SUBLW  03
00184:  BNZ   01B4
00186:  SETF   F94
00188:  MOVF   F82,W
0018A:  CLRF   09
0018C:  MOVWF  08
0018E:  SETF   F95
00190:  MOVF   F83,W
00192:  CLRF   03
00194:  MOVWF  0A
00196:  MOVFF  03,0B
0019A:  MOVFF  09,0D
0019E:  MOVFF  08,0C
001A2:  MOVFF  03,0F
001A6:  MOVWF  0E
001A8:  BRA    0004
001AA:  MOVFF  02,06
001AE:  MOVFF  01,05
001B2:  BRA    01F6
....................    else if(operacion == 4) 
001B4:  MOVF   07,W
001B6:  SUBLW  04
001B8:  BNZ   01F6
....................    { 
....................    if(input_d()==0) error() , delay_ms(2); //funcion de error  
001BA:  SETF   F95
001BC:  MOVF   F83,F
001BE:  BNZ   01CA
001C0:  BRA    004C
001C2:  MOVLW  02
001C4:  MOVWF  09
001C6:  RCALL  0024
001C8:  BRA    01F6
....................    else resultado = (long)input_c() / (long)input_d(); 
001CA:  SETF   F94
001CC:  MOVF   F82,W
001CE:  CLRF   09
001D0:  MOVWF  08
001D2:  SETF   F95
001D4:  MOVF   F83,W
001D6:  CLRF   03
001D8:  MOVWF  0A
001DA:  MOVFF  03,0B
001DE:  MOVFF  09,0D
001E2:  MOVFF  08,0C
001E6:  MOVFF  03,0F
001EA:  MOVWF  0E
001EC:  BRA    0096
001EE:  MOVFF  02,06
001F2:  MOVFF  01,05
....................    } 
....................    output_a(resultado); 
001F6:  CLRF   F92
001F8:  MOVFF  05,F89
....................    output_b(resultado>>6); 
001FC:  RRCF   06,W
001FE:  MOVWF  09
00200:  RRCF   05,W
00202:  MOVWF  08
00204:  RRCF   09,F
00206:  RRCF   08,F
00208:  RRCF   09,F
0020A:  RRCF   08,F
0020C:  RRCF   09,F
0020E:  RRCF   08,F
00210:  RRCF   09,F
00212:  RRCF   08,F
00214:  RRCF   09,F
00216:  RRCF   08,F
00218:  MOVLW  03
0021A:  ANDWF  09,F
0021C:  CLRF   F93
0021E:  MOVFF  08,F8A
....................    output_e(resultado>>10); 
00222:  CLRF   09
00224:  RRCF   06,W
00226:  MOVWF  08
00228:  RRCF   08,F
0022A:  MOVLW  3F
0022C:  ANDWF  08,F
0022E:  BCF    F96.0
00230:  BCF    F96.1
00232:  BCF    F96.2
00234:  BCF    F96.3
00236:  MOVFF  08,F8D
0023A:  BRA    0114
....................    }  
.................... }    
.................... void error() 
0023C:  SLEEP 
.................... { 
....................    output_a(0b00111111); 
*
0004C:  CLRF   F92
0004E:  MOVLW  3F
00050:  MOVWF  F89
....................    output_b(0b00001111); 
00052:  CLRF   F93
00054:  MOVLW  0F
00056:  MOVWF  F8A
....................    output_e(0b00001111); 
00058:  BCF    F96.0
0005A:  BCF    F96.1
0005C:  BCF    F96.2
0005E:  BCF    F96.3
00060:  MOVWF  F8D
....................    delay_ms(retardo); 
00062:  MOVLW  02
00064:  MOVWF  08
00066:  MOVLW  FA
00068:  MOVWF  09
0006A:  RCALL  0024
0006C:  DECFSZ 08,F
0006E:  BRA    0066
....................    output_a(0b00000000); 
00070:  CLRF   F92
00072:  CLRF   F89
....................    output_b(0b00000000); 
00074:  CLRF   F93
00076:  CLRF   F8A
....................    output_e(0b00001000); 
00078:  BCF    F96.0
0007A:  BCF    F96.1
0007C:  BCF    F96.2
0007E:  BCF    F96.3
00080:  MOVLW  08
00082:  MOVWF  F8D
....................    delay_ms(retardo); 
00084:  MOVLW  02
00086:  MOVWF  08
00088:  MOVLW  FA
0008A:  MOVWF  09
0008C:  RCALL  0024
0008E:  DECFSZ 08,F
00090:  BRA    0088
00092:  GOTO   01C2 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
