CCS PCH C Compiler, Version 5.012, 41559               27-mar-17 18:58

               Filename:   D:\SystemasEmbebidos4G\Practica 2\Calculadora_8bits.lst

               ROM used:   430 bytes (1%)
                           Largest free fragment is 65106
               RAM used:   6 (0%) at main() level
                           12 (0%) worst case
               Stack used: 2 locations
               Stack size: 31

*
00000:  GOTO   009E
.................... #include <18F4620.h> 
.................... ///////////// Standard Header file for the PIC18F4620 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4620 
*
00074:  MOVF   0B,W
00076:  CLRF   01
00078:  SUBWF  0A,W
0007A:  BC    0082
0007C:  MOVFF  0A,00
00080:  BRA    009A
00082:  CLRF   00
00084:  MOVLW  08
00086:  MOVWF  0C
00088:  RLCF   0A,F
0008A:  RLCF   00,F
0008C:  MOVF   0B,W
0008E:  SUBWF  00,W
00090:  BTFSC  FD8.0
00092:  MOVWF  00
00094:  RLCF   01,F
00096:  DECFSZ 0C,F
00098:  BRA    0088
0009A:  GOTO   0160 (RETURN)
....................  
.................... #list 
....................  
.................... #fuses INTRC_IO, NOFCMEN, NOIESO, PUT, NOBROWNOUT, NOWDT 
.................... #fuses NOPBADEN, NOMCLR, STVREN, NOLVP, NODEBUG 
.................... #use delay(clock=32000000) 
*
00004:  CLRF   FEA
00006:  MOVLW  0B
00008:  MOVWF  FE9
0000A:  MOVF   FEF,W
0000C:  BZ    0028
0000E:  MOVLW  0A
00010:  MOVWF  01
00012:  CLRF   00
00014:  DECFSZ 00,F
00016:  BRA    0014
00018:  DECFSZ 01,F
0001A:  BRA    0012
0001C:  MOVLW  5F
0001E:  MOVWF  00
00020:  DECFSZ 00,F
00022:  BRA    0020
00024:  DECFSZ FEF,F
00026:  BRA    000E
00028:  RETURN 0
.................... #define retardo 500 
....................  
.................... void error(); 
....................  
.................... void main (void){ 
*
0009E:  CLRF   FF8
000A0:  BCF    FD0.7
000A2:  MOVLW  70
000A4:  MOVWF  FD3
000A6:  MOVLW  40
000A8:  MOVWF  F9B
000AA:  MOVF   FD3,W
000AC:  MOVF   FC1,W
000AE:  ANDLW  C0
000B0:  IORLW  0F
000B2:  MOVWF  FC1
000B4:  MOVLW  07
000B6:  MOVWF  FB4
....................    set_tris_a(0b00000000); 
000B8:  MOVLW  00
000BA:  MOVWF  F92
....................    set_tris_b(0b11110000); 
000BC:  MOVLW  F0
000BE:  MOVWF  F93
....................    SETUP_ADC_PORTS(NO_ANALOGS);// para conversion a todos los puertos analogos a digitales 
000C0:  MOVF   FC1,W
000C2:  ANDLW  C0
000C4:  IORLW  0F
000C6:  MOVWF  FC1
....................    setup_oscillator(OSC_32MHZ); 
000C8:  MOVLW  70
000CA:  MOVWF  FD3
000CC:  MOVLW  40
000CE:  MOVWF  F9B
000D0:  MOVF   FD3,W
....................    int16 resultado=0; 
....................    int8 operando1=0,operando2=0,operacion=0; //Variables operandos operacion 
000D2:  CLRF   06
000D4:  CLRF   05
000D6:  CLRF   07
000D8:  CLRF   08
000DA:  CLRF   09
....................    while(True){ 
....................    operando1=input_c(); 
000DC:  SETF   F94
000DE:  MOVFF  F82,07
....................    operando2=input_d(); 
000E2:  SETF   F95
000E4:  MOVFF  F83,08
....................    if(input(PIN_B4)==1) operacion=1; //suma 
000E8:  BSF    F93.4
000EA:  BTFSS  F81.4
000EC:  BRA    00F4
000EE:  MOVLW  01
000F0:  MOVWF  09
000F2:  BRA    0116
....................    else if(input(PIN_B5)==1) operacion=2;//resta 
000F4:  BSF    F93.5
000F6:  BTFSS  F81.5
000F8:  BRA    0100
000FA:  MOVLW  02
000FC:  MOVWF  09
000FE:  BRA    0116
....................    else if(input(PIN_B6)==1) operacion=3;//multiplicacion 
00100:  BSF    F93.6
00102:  BTFSS  F81.6
00104:  BRA    010C
00106:  MOVLW  03
00108:  MOVWF  09
0010A:  BRA    0116
....................    else if(input(PIN_B7)==1) operacion=4;//divicion 
0010C:  BSF    F93.7
0010E:  BTFSS  F81.7
00110:  BRA    0116
00112:  MOVLW  04
00114:  MOVWF  09
....................    if(operacion==1) resultado = operando1 + operando2; 
00116:  DECFSZ 09,W
00118:  BRA    0124
0011A:  MOVF   08,W
0011C:  ADDWF  07,W
0011E:  MOVWF  05
00120:  CLRF   06
00122:  BRA    0166
....................    else if(operacion == 2) resultado = operando1 - operando2; 
00124:  MOVF   09,W
00126:  SUBLW  02
00128:  BNZ   0134
0012A:  MOVF   08,W
0012C:  SUBWF  07,W
0012E:  MOVWF  05
00130:  CLRF   06
00132:  BRA    0166
....................    else if(operacion == 3) resultado = operando1 * operando2; 
00134:  MOVF   09,W
00136:  SUBLW  03
00138:  BNZ   0146
0013A:  MOVF   07,W
0013C:  MULWF  08
0013E:  MOVF   FF3,W
00140:  CLRF   06
00142:  MOVWF  05
00144:  BRA    0166
....................    else if(operacion == 4) 
00146:  MOVF   09,W
00148:  SUBLW  04
0014A:  BNZ   0166
....................    { 
....................    if(input_d()==0) error(); //funcion de error  
0014C:  SETF   F95
0014E:  MOVF   F83,F
00150:  BNZ   0156
00152:  BRA    002A
00154:  BRA    0166
....................    else resultado = operando1 / operando2; 
00156:  MOVFF  07,0A
0015A:  MOVFF  08,0B
0015E:  BRA    0074
00160:  CLRF   06
00162:  MOVFF  01,05
....................    } 
....................    output_a(resultado); 
00166:  CLRF   F92
00168:  MOVFF  05,F89
....................    output_b(resultado>>6); 
0016C:  RRCF   06,W
0016E:  MOVWF  0B
00170:  RRCF   05,W
00172:  MOVWF  0A
00174:  RRCF   0B,F
00176:  RRCF   0A,F
00178:  RRCF   0B,F
0017A:  RRCF   0A,F
0017C:  RRCF   0B,F
0017E:  RRCF   0A,F
00180:  RRCF   0B,F
00182:  RRCF   0A,F
00184:  RRCF   0B,F
00186:  RRCF   0A,F
00188:  MOVLW  03
0018A:  ANDWF  0B,F
0018C:  CLRF   F93
0018E:  MOVFF  0A,F8A
....................    output_e(resultado>>10); 
00192:  CLRF   0B
00194:  RRCF   06,W
00196:  MOVWF  0A
00198:  RRCF   0A,F
0019A:  MOVLW  3F
0019C:  ANDWF  0A,F
0019E:  BCF    F96.0
001A0:  BCF    F96.1
001A2:  BCF    F96.2
001A4:  BCF    F96.3
001A6:  MOVFF  0A,F8D
001AA:  BRA    00DC
....................    }  
.................... }    
.................... void error() 
001AC:  SLEEP 
.................... { 
....................    output_a(0b00111111); 
*
0002A:  CLRF   F92
0002C:  MOVLW  3F
0002E:  MOVWF  F89
....................    output_b(0b00001111); 
00030:  CLRF   F93
00032:  MOVLW  0F
00034:  MOVWF  F8A
....................    output_e(0b00001111); 
00036:  BCF    F96.0
00038:  BCF    F96.1
0003A:  BCF    F96.2
0003C:  BCF    F96.3
0003E:  MOVWF  F8D
....................    delay_ms(retardo); 
00040:  MOVLW  02
00042:  MOVWF  0A
00044:  MOVLW  FA
00046:  MOVWF  0B
00048:  RCALL  0004
0004A:  DECFSZ 0A,F
0004C:  BRA    0044
....................    output_a(0b00000000); 
0004E:  CLRF   F92
00050:  CLRF   F89
....................    output_b(0b00000000); 
00052:  CLRF   F93
00054:  CLRF   F8A
....................    output_e(0b00001000); 
00056:  BCF    F96.0
00058:  BCF    F96.1
0005A:  BCF    F96.2
0005C:  BCF    F96.3
0005E:  MOVLW  08
00060:  MOVWF  F8D
....................    delay_ms(retardo); 
00062:  MOVLW  02
00064:  MOVWF  0A
00066:  MOVLW  FA
00068:  MOVWF  0B
0006A:  RCALL  0004
0006C:  DECFSZ 0A,F
0006E:  BRA    0066
00070:  GOTO   0166 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 0800   INTRC_IO NOFCMEN NOIESO
   Word  2: 1E18   PUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 0500   CCP2C1 NOPBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
